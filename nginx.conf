user www-data;
worker_processes  auto; 
error_log  logs/error.log debug;
events {
	worker_connections  1024;
}
rtmp {
	server {
		listen 1935; # listen on standard port
      chunk_size 4000; 
		allow play all;

		# VOD of records
		# WebM - uses the VP8 codec for video and the Vorbis codec for audio
    	# MP4 - uses the H.264 codec for video and the AAC codec for audio
		# URL: rtmp://nginx:1935/vod/filename.flv
		application vod {
			play /hls/vod;
		}

		# creates our live full-resolution HLS videostream from our incoming encoder stream 
	   # and tells where to put the HLS video manifest and video fragments
		application live {
			allow play all;
			live on;	# allow live input
			record off;
			#record all;
			#record_path /hls/record;
			#record_suffix -%Y-%m-%d-%H%M.flv;
			#record_unique on;
			hls on;
			hls_nested on;
			hls_path /hls/live;
			hls_fragment 10s;

#            hls_fragment 3;
#            hls_playlist_length 60;
            # disable consuming the stream from nginx as rtmp
#            deny play all;


         # Once receive stream, transcode for adaptive streaming
         # This single ffmpeg command takes the input and transforms
         # the source into 4 different streams with different bitrate
         # and quality. P.S. The scaling done here respects the aspect
         # ratio of the input.
			# 240p Low Definition stream at 288kbps
			# 480p Standard Definition stream at 448kbps
			# 540p Standard Definition stream at 1152kbps
			# 720p High Definition stream at 2048kbps
			# Source resolution, source bitrate (Copy)
         exec ffmpeg -i rtmp://localhost/$app/$name -async 1 -vsync -1
                        -c:v libx264 -c:a libvo_aacenc -b:v 256k -b:a 32k -vf "scale=480:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/show/$name_low
                        -c copy -f flv rtmp://localhost/show/$name_src 2>>/hls/log/$app_$name.txt;
          #              -c:v libx264 -c:a libvo_aacenc -b:v 768k -b:a 96k -vf "scale=720:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/show/$name_mid
           #             -c:v libx264 -c:a libvo_aacenc -b:v 1024k -b:a 128k -vf "scale=960:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/show/$name_high
            #            -c:v libx264 -c:a libvo_aacenc -b:v 1920k -b:a 128k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/show/$name_hd720

			# https://trac.ffmpeg.org/wiki/EncodingForStreamingSites
			# https://trac.ffmpeg.org/wiki/Encode/H.264
			# http://help.encoding.com/knowledge-base/article/what-are-the-best-flash-video-frame-dimensions/
			#creates the downsampled or trans-rated mobile video stream
         # as a 400kbps, 480x360 sized video
			#exec ffmpeg -y -i rtmp://192.168.1.10/$app/$name 
			#	-c:v h264 -pix_fmt yuv420p -s 320x240 -b:v 128k -crf 30 -r 25 -preset:v ultrafast 
			#		-strict experimental -c:a aac -ac 2 -b:a 64k -threads 1
			#			-f flv rtmp://192.168.1.10:1935/mobile/$name 2>>/hls/log/$app_$name.txt;
			
			# convert recorded file to mp4 format
			# exec_record_done ffmpeg -y -i $path 
			#	-acodec libmp3lame -ar 44100 -ac 2 -vcodec libx264 -pix_fmt yuv420p
			#		$dirname/$basename.mp4;

		}

      # This application is for splitting the stream into HLS fragments
      application show {
            live on; # Allows live input from above

            hls on; # Enable HTTP Live Streaming
				hls_nested on;
            # Pointing this to an SSD is better as this involves lots of IO
				hls_path /hls/show;
				hls_fragment 10s;

            # Instruct clients to adjust resolution according to bandwidth
            hls_variant _low BANDWIDTH=288000; # Low bitrate, sub-SD resolution
         #   hls_variant _mid BANDWIDTH=448000; # Medium bitrate, SD resolution
         #   hls_variant _high BANDWIDTH=1152000; # High bitrate, higher-than-SD resolution
         #   hls_variant _hd720 BANDWIDTH=2048000; # High bitrate, HD 720p resolution
         #   hls_variant _src BANDWIDTH=4096000; # Source bitrate, source resolution
      }

	   # ffmpeg-created stream and tells where to put the HLS video manifest and video fragments
		# application mobile {
		#	allow play all;
		#	live on;
		#	hls on;
		#	hls_nested on;
		#	hls_path /hls/mobile;
		#	hls_fragment 10s;
		#}

	}
}
http {
	include       mime.types;
	default_type  application/octet-stream;

#    location /hls {
        # Disable cache
#        add_header Cache-Control no-cache;

        # CORS setup
#        add_header 'Access-Control-Allow-Origin' '*' always;
#        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
#        add_header 'Access-Control-Allow-Headers' 'Range';

        # allow CORS preflight requests
 #       if ($request_method = 'OPTIONS') {
#            add_header 'Access-Control-Allow-Origin' '*';
#            add_header 'Access-Control-Allow-Headers' 'Range';
#            add_header 'Access-Control-Max-Age' 1728000;
#            add_header 'Content-Type' 'text/plain charset=UTF-8';
#            add_header 'Content-Length' 0;
#            return 204;
      #  }

     #   types {
    #        application/vnd.apple.mpegurl m3u8;
   #         video/mp2t ts;
  #      }

 #       root /mnt/;
#    }


	server {
		listen 80;
		server_name 192.168.1.10;

		root /hls;
		index  index.php index.html index.htm;

		# See http://licson.net/post/optimizing-nginx-for-large-file-delivery/ for more detail
		# This optimizes the server for HLS fragment delivery
		sendfile off;
		tcp_nopush on;
		aio on;
		directio 512;

		# Nginx desktop devices HLS stream (fullres)
      # URL: /live/my-stream-key/index.m3u8
		location /live {
			types {
				application/vnd.apple.mpegurl m3u8;
			}
			alias /hls/live;
         add_header Cache-Control no-cache; # Prevent caching of HLS fragments
         add_header Access-Control-Allow-Origin *; # Allow web player to access our playlist
			allow 0.0.0.0;
		}

		# Nginx desktop devices HLS stream (manyres)
      # URL: /show/my-stream-key/index.m3u8
		location /show {
			types {
				application/vnd.apple.mpegurl m3u8;
			}
			alias /hls/show;
         add_header Cache-Control no-cache; # Prevent caching of HLS fragments
         add_header Access-Control-Allow-Origin *; # Allow web player to access our playlist
			allow 0.0.0.0;
		}


		# Nginx mobiles devices HLS stream (lowres)
      # URL: /mobile/my-stream-key/index.m3u8
		location /mobile {
			types {
				application/vnd.apple.mpegurl m3u8;
			}
			alias /hls/mobile;
         add_header Cache-Control no-cache; # Prevent caching of HLS fragments
         add_header Access-Control-Allow-Origin *; # Allow web player to access our playlist
			allow 0.0.0.0;
		}   

		location ~* \.(flv|mp4|webm|ts|m3u8)$ {
			# CORS Origin Nginx Configuration for CDN Players
			# https://docs.viblast.com/player/cors/cors-on-nginx
			# curl -I [http-end-point] with result "Access-Control-Allow-Origin: *"
			# https://michielkalkman.com/snippets/nginx-cors-open-configuration.html
			add_header Cache-Control no-cache;
			add_header Access-Control-Allow-Origin *;
			add_header Access-Control-Max-Age 3600;
			add_header Access-Control-Expose-Headers Content-Length;
			add_header Access-Control-Allow-Headers Range;
		}

		# Raw FLV and MP4 for HTML5 Players
      # URL: /vod/filename.flv
		location /vod {
			flv;
			mp4;
			mp4_buffer_size       1m;
			mp4_max_buffer_size   5m;
			# mp4_limit_rate        on;
			# mp4_limit_rate_after  30s;

			alias /hls/vod;
			add_header Cache-Control no-cache;
			autoindex on;
			allow 0.0.0.0;
		}   

		# HLS Encoding Execution Log
      location /hls/log {
			alias /hls/log;
			autoindex on;
			allow 192.168.1.0/24;
			allow 127.0.0.1;
		}

		# Nginx RTMP Module Raw Stats
		location /rtmpstats {
  			rtmp_stat all;
			allow 192.168.1.0/24;
			allow 127.0.0.1;
		}	

		# Nginx RTMP Module Stats (Number of Subscribers)
      # URL Query String: ?app=myapp&name=mystream
		# https://github.com/arut/nginx-rtmp-module/wiki/Getting-number-of-subscribers
		location /nclients {
			proxy_pass http://127.0.0.1/rtmpstats;
			xslt_stylesheet html/nclients.xsl app='$arg_app' name='$arg_name';
			add_header Refresh "3; $request_uri";
			allow 192.168.1.0/24;
			allow 127.0.0.1;
		}

		# Nginx RTMP Module Control
		# https://github.com/arut/nginx-rtmp-module/wiki/Control-module	
		# Record: http://server.com/control/record/start|stop?srv=SRV&app=APP&name=NAME&rec=REC
		# Drop: http://server.com/control/drop/publisher|subscriber|client?srv=SRV&app=APP&name=NAME&addr=ADDR&clientid=CLIENTID
		location /control {
			rtmp_control all;
			allow 192.168.1.0/24;
			allow 127.0.0.1;
		}

		# Nginx Stats
		#location /stats {
		#	stub_status;
		#	allow 192.168.1.0/24;
		#	allow 127.0.0.1;
		#}

		# PHP
    	location ~ \.php$ {
      	try_files $uri =404;
			# try_files $uri $uri/ /index.php$is_args$args;
        	fastcgi_split_path_info ^(.+\.php)(/.+)$;
        	fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
        	fastcgi_index index.php;
        	fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        	include fastcgi_params;
    	}

		# Static files
    	location = /favicon.ico { log_not_found off; access_log off; }
    	location = /robots.txt { log_not_found off; access_log off; allow all; }
    	#location ~* \.(css|gif|ico|jpeg|jpg|js|png)$ {
      #  expires max;
      #  log_not_found off;
    	#}

		# Nginx Root
		location / {
			autoindex on;
		}   

	
	}
} 
